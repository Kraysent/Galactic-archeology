{
  "$ref": "#/definitions/IntegrationConfigSchema",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "IOConfigSchema": {
      "additionalProperties": false,
      "properties": {
        "filenames": {
          "description": "List of filenames. In case of csv file they will be stacked together, in case of fits only the first one will be taken and the rest will be ignored.",
          "items": {
            "title": "filenames",
            "type": "string"
          },
          "title": "filenames",
          "type": "array"
        },
        "format": {
          "description": "Format of the input file. Can be 'csv' or 'fits'.",
          "title": "format",
          "type": "string"
        }
      },
      "required": [
        "filenames",
        "format"
      ],
      "type": "object"
    },
    "ImportsSchema": {
      "additionalProperties": false,
      "properties": {
        "integrators": {
          "description": "This field lists integrators that would be used to model snapshot.",
          "items": {
            "title": "integrators",
            "type": "string"
          },
          "title": "integrators",
          "type": "array"
        },
        "models": {
          "description": "This field lists models that would be used to create snapshot.",
          "items": {
            "title": "models",
            "type": "string"
          },
          "title": "models",
          "type": "array"
        },
        "tasks": {
          "description": "This field lists tasks that would be used in this simulation.",
          "items": {
            "title": "tasks",
            "type": "string"
          },
          "title": "tasks",
          "type": "array"
        }
      },
      "type": "object"
    },
    "IntegrationConfigSchema": {
      "additionalProperties": true,
      "properties": {
        "imports": {
          "$ref": "#/definitions/ImportsSchema",
          "description": "This field lists imports for various actions.",
          "type": "object"
        },
        "input_file": {
          "$ref": "#/definitions/IOConfigSchema",
          "description": "Parameters of input file: its format and path.",
          "type": "object"
        },
        "integrator": {
          "$ref": "#/definitions/IntegratorSchema",
          "description": "Object that stores infromation about the integration algorithm.",
          "type": "object"
        },
        "logging": {
          "additionalProperties": {},
          "description": "This field describes logging configuration.",
          "title": "logging",
          "type": "object"
        },
        "model_time": {
          "description": "Time until which model would be integrated. In future custom conditition is planned to be applied.",
          "title": "model_time",
          "type": "array"
        },
        "output_file": {
          "description": "Path to file where output model would be saved.",
          "title": "output_file",
          "type": "string"
        },
        "overwrite": {
          "description": "Flag that shows whether to overwrite model if it already exists on given filepath.",
          "title": "overwrite",
          "type": "boolean"
        },
        "snapshot_interval": {
          "description": "Interval between to consecutive snapshots to write to output file.",
          "title": "snapshot_interval",
          "type": "integer"
        },
        "tasks": {
          "description": "This field describes list of tasks. Each task is a class that has run(...) method that processes Snapshot and returns some data.",
          "items": {
            "$ref": "#/definitions/TaskConfigSchema",
            "type": "object"
          },
          "title": "tasks",
          "type": "array"
        },
        "visualizer": {
          "$ref": "#/definitions/VisualizerConfigSchema",
          "description": "Visualizer is responsible for the matplotlib's plots, their layout and format of the data. This fields describes layout; format of the data is specified inside tasks.",
          "type": "object"
        }
      },
      "required": [
        "input_file",
        "integrator",
        "model_time"
      ],
      "type": "object"
    },
    "IntegratorSchema": {
      "additionalProperties": false,
      "properties": {
        "args": {
          "additionalProperties": {},
          "description": "Arguments that would be passed into the constructur of the integrator.",
          "title": "args",
          "type": "object"
        },
        "name": {
          "description": "Name of the integrator.",
          "title": "name",
          "type": "string"
        }
      },
      "required": [
        "args",
        "name"
      ],
      "type": "object"
    },
    "PanelSchema": {
      "additionalProperties": false,
      "properties": {
        "coords": {
          "description": "Position and size of the graph in form of [x, y, width, height]. Coordinates are counted from the left bottom of the picture.",
          "items": {
            "format": "float",
            "title": "coords",
            "type": "number"
          },
          "title": "coords",
          "type": "array"
        },
        "id": {
          "description": "Id of the panel. Should be unique.",
          "title": "id",
          "type": "string"
        },
        "params": {
          "$ref": "#/definitions/PlotParametersSchema",
          "description": "Parameters of the graph box. They should be given the same names as ones in matplotlib.pyplot (and proper values) as most of them are just passed along to it.",
          "type": "object"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "PlotParametersSchema": {
      "additionalProperties": false,
      "properties": {
        "basex": {
          "title": "basex",
          "type": "integer"
        },
        "basey": {
          "title": "basey",
          "type": "integer"
        },
        "grid": {
          "title": "grid",
          "type": "boolean"
        },
        "ticks_direction": {
          "title": "ticks_direction",
          "type": "string"
        },
        "title": {
          "title": "title",
          "type": "string"
        },
        "xlabel": {
          "title": "xlabel",
          "type": "string"
        },
        "xlim": {
          "items": {
            "format": "float",
            "title": "xlim",
            "type": "number"
          },
          "title": "xlim",
          "type": "array"
        },
        "xscale": {
          "title": "xscale",
          "type": "string"
        },
        "xticks": {
          "items": {
            "format": "float",
            "title": "xticks",
            "type": "number"
          },
          "title": "xticks",
          "type": "array"
        },
        "ylabel": {
          "title": "ylabel",
          "type": "string"
        },
        "ylim": {
          "items": {
            "format": "float",
            "title": "ylim",
            "type": "number"
          },
          "title": "ylim",
          "type": "array"
        },
        "yscale": {
          "title": "yscale",
          "type": "string"
        },
        "yticks": {
          "items": {
            "format": "float",
            "title": "yticks",
            "type": "number"
          },
          "title": "yticks",
          "type": "array"
        }
      },
      "type": "object"
    },
    "TaskConfigSchema": {
      "additionalProperties": false,
      "properties": {
        "actions_after": {
          "description": "List of actions that would run some function on every single result of the task.",
          "items": {
            "additionalProperties": {},
            "title": "actions_after",
            "type": "object"
          },
          "title": "actions_after",
          "type": "array"
        },
        "actions_before": {
          "description": "List of actions that would run some function on a given snapshot before running the task.",
          "items": {
            "additionalProperties": {},
            "title": "actions_before",
            "type": "object"
          },
          "title": "actions_before",
          "type": "array"
        },
        "args": {
          "additionalProperties": {},
          "description": "Arguments to the constructor of the task.",
          "title": "args",
          "type": "object"
        },
        "id": {
          "description": "Textual identificator of task instance.",
          "title": "id",
          "type": "string"
        },
        "inputs": {
          "additionalProperties": {
            "title": "inputs",
            "type": "string"
          },
          "description": "Dictionary of dynamic parameters of the task.",
          "title": "inputs",
          "type": "object"
        },
        "name": {
          "description": "Name of the task.",
          "title": "name",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "VisualizerConfigSchema": {
      "additionalProperties": false,
      "properties": {
        "figsize": {
          "description": "Figure size in inches.",
          "items": {
            "title": "figsize",
            "type": "integer"
          },
          "title": "figsize",
          "type": "array"
        },
        "output_dir": {
          "description": "Output directory where the images would be saved.",
          "title": "output_dir",
          "type": "string"
        },
        "panels": {
          "description": "List of panels, their layouts and properties.",
          "items": {
            "$ref": "#/definitions/PanelSchema",
            "type": "object"
          },
          "title": "panels",
          "type": "array"
        },
        "pic_filename": {
          "description": "Pictures will be saved in output_dir with this filename. {i} is iteration number.",
          "title": "pic_filename",
          "type": "string"
        },
        "pickle_filename": {
          "description": "Pickle files will be saved in output_dir with this filename. {i} is iteration number.",
          "title": "pickle_filename",
          "type": [
            "string",
            "null"
          ]
        },
        "title": {
          "description": "Title template. Use {time} to get time in Myr. One can use standart python formatters to format number of digits, rounding, etc.",
          "title": "title",
          "type": "string"
        }
      },
      "required": [
        "output_dir",
        "panels"
      ],
      "type": "object"
    }
  },
  "description": "Schema for integration configuration file for OMTool.",
  "title": "Integration config schema"
}